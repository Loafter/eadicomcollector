package main

import (
	"encoding/base64"
	"encoding/json"
	"errors"
	"io/ioutil"
	"log"
	"net/http"
	"strconv"
)

const htmlData = ""

//main srv class
type EaFolderCompressorSrv struct {
	fcom FolderCompressor
}

//start and init srv
func (srv *EaFolderCompressorSrv) Start(listenPort int) error {
	http.HandleFunc("/compress", srv.Compress)
	http.HandleFunc("/", srv.Redirect)
	http.HandleFunc("/index.html", srv.index)
	if err := http.ListenAndServe(":"+strconv.Itoa(listenPort), nil); err != nil {
		return errors.New("error: can't start listen http server")
	}
	return nil
}

//serve main page request
func (srv *EaFolderCompressorSrv) index(rwr http.ResponseWriter, req *http.Request) {
	rwr.Header().Set("Content-Type: text/html", "*")

	content, err := ioutil.ReadFile("index.html")
	if err != nil {
		log.Println("warning: start page not found, return included page")
		val, _ := base64.StdEncoding.DecodeString(htmlData)
		rwr.Write(val)
		return
	}
	rwr.Write(content)
}

func (service *EaFolderCompressorSrv) Redirect(responseWriter http.ResponseWriter, request *http.Request) {
	http.Redirect(responseWriter, request, "/index.html", 301)
}

//serve cEcho responce
func (srv *EaFolderCompressorSrv) Compress(rwr http.ResponseWriter, httpreq *http.Request) {
	defer httpreq.Body.Close()
	bodyData, err := ioutil.ReadAll(httpreq.Body)
	if err != nil {
		strErr := "error: Can't read http body data"
		http.Error(rwr, err.Error(), http.StatusInternalServerError)
		log.Println(strErr)
		return
	}
	//parse http request
	var req EaCompRequest
	if err := json.Unmarshal(bodyData, &req); err != nil {
		strErr := "error: can't parse request data"
		http.Error(rwr, err.Error(), http.StatusInternalServerError)
		log.Println(strErr)
		return
	}

	TgF := req.ArchPathPrefix + "\\" + req.Year + "\\" + req.Month + "\\" + req.Day + "\\" + req.Pid
	NHash := req.Year + req.Month + req.Day + req.Pid
	ResF := req.OutputDir + "\\" + NHash + ".zip"

	log.Println("info: try compress file ", "7z.exe", "a", "-tzip", TgF, ResF)
	err = srv.fcom.CompressFolder("7z.exe", "a", "-tzip", TgF, ResF)
	if err != nil {
		log.Println(err)
		http.Error(rwr, err.Error(), http.StatusInternalServerError)
		return

	}
	res := EaCompResponse{Guid: NHash}
	js, err := json.Marshal(res)
	if err != nil {
		http.Error(rwr, err.Error(), http.StatusInternalServerError)
		return
	}
	rwr.Header().Set("Content-Type", "application/json")
	rwr.Write(js)
}
